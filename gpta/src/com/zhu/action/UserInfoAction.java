/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zhu.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zhu.entity.Orderinfo;
import com.zhu.entity.User;
import com.zhu.form.UserInfoForm;
import com.zhu.service.OrderService;
import com.zhu.service.UserService;
import com.zhu.util.MD5;

/**
 * MyEclipse Struts Creation date: 04-08-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="m" scope="request" validate="true"
 */
public class UserInfoAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// 用户中心
	public ActionForward userinfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session.getAttribute("user") == null) {
			return mapping.findForward("wrong");
		} else {
			User user = new User();
			user = (User) session.getAttribute("user");
			UserService userService = new UserService();
			List<User> userinfo = userService.getUserInfoById(user.getId());
			request.setAttribute("userinfo", userinfo);
			return mapping.findForward("list");
		}
	}

	public void getuserbyid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		UserInfoForm userInfoForm = (UserInfoForm) form;
		UserService userService = new UserService();
		User user = (User) userService.getUserById(userInfoForm.getId());
		String phone = user.getPhone();
		PrintWriter out = response.getWriter();
		out.print(phone);
		out.flush();
		out.close();
	}

	public void update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		UserInfoForm userInfoForm = (UserInfoForm) form;
		UserService userService = new UserService();
		User user = (User) userService.getUserById(userInfoForm.getId());
		user.setPhone(userInfoForm.getPhone());
		user.setBirthday(userInfoForm.getBirthday());
		user.setIdcard(userInfoForm.getIdcard().replace(
				userInfoForm.getIdcard().substring(3, 14), "***********"));
		user.setEmail(userInfoForm.getEmail());
		user.setAddress(userInfoForm.getAddress());
		userService.updUserInfo(user);
		int back = 0;
		PrintWriter out = response.getWriter();
		out.print(back);
		out.flush();
		out.close();
	}

	public ActionForward updpwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session.getAttribute("user") == null) {
			return mapping.findForward("wrong");
		} else {
			return mapping.findForward("updpwd");
		}
	}

	// 用户订单
	public ActionForward userorder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session.getAttribute("user") == null) {
			return mapping.findForward("wrong");
		} else {
			User user = (User) session.getAttribute("user");
			OrderService orderService = new OrderService();
			// HotSpotService hotspotService = new HotSpotService();
			List<Orderinfo> userorder = orderService.getOrderByUserId(user
					.getId());
			request.setAttribute("userorder", userorder);
			return mapping.findForward("userorder");
		}
	}

	public void alterpwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		HttpSession session = request.getSession();
		MD5 md5 = new MD5();
		User user = new User();
		user = (User) session.getAttribute("user");
		UserService userService = new UserService();
		UserInfoForm userInfoForm = (UserInfoForm) form;
		// 从session中获取用户ID
		String id = user.getId();
		// 获取session中用户的数据库密码
		String dbpassword = user.getPassword();
		// 获取用户输入的旧密码
		String password = md5.GetMD5Code(userInfoForm.getPassword());
		// 获取用户输入的新密码
		String newpassword = md5.GetMD5Code(userInfoForm.getNewpassword());
		PrintWriter out = response.getWriter();
		int back = 0;
		if (dbpassword.equals(password)) {
			user.setPassword(newpassword);
			userService.updUserInfo(user);
			out.print(back);
			out.flush();
			out.close();
		} else {
			back = 1;
			out.print(back);
			out.flush();
			out.close();
		}
	}
}