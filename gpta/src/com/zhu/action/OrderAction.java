/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zhu.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zhu.entity.Car;
import com.zhu.entity.Hotspot;
import com.zhu.entity.Orderinfo;
import com.zhu.entity.User;
import com.zhu.form.OrderForm;
import com.zhu.service.CarService;
import com.zhu.service.HotSpotService;
import com.zhu.service.OrderService;
import com.zhu.util.UUID;

/**
 * MyEclipse Struts Creation date: 05-02-2015
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="m" scope="request" validate="true"
 */
public class OrderAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException
	 */
	// 添加订单
	public void init(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		Orderinfo order = new Orderinfo();
		OrderForm orderForm = (OrderForm) form;
		OrderService orderService = new OrderService();
		UUID uuid = new UUID();
		order.setId(uuid.getUUID());
		order.setUserid(user.getId());
		order.setSpotid(orderForm.getSpotid());
		order.setNum(orderForm.getNum());
		order.setPrice(orderForm.getPrice());
		order.setStatus(0);
		order.setN1(orderForm.getN1());
		order.setN2(orderForm.getN2());
		order.setN3(orderForm.getN3());
		order.setN4(orderForm.getN4());
		order.setN5(orderForm.getN5());
		order.setN6(orderForm.getN6());
		order.setN7(orderForm.getN7());
		order.setN8(orderForm.getN8());
		order.setN9(orderForm.getN9());
		order.setN10(orderForm.getN10());
		order.setI1(orderForm.getI1().replace(
				orderForm.getI1().substring(3, 14), "***********"));
		if (orderForm.getI2() != "") {
			order.setI2(orderForm.getI2().replace(
					orderForm.getI2().substring(3, 14), "***********"));
		}
		if (orderForm.getI3() != "") {
			order.setI3(orderForm.getI3().replace(
					orderForm.getI3().substring(3, 14), "***********"));
		}
		if (orderForm.getI4() != "") {
			order.setI4(orderForm.getI4().replace(
					orderForm.getI4().substring(3, 14), "***********"));
		}
		if (orderForm.getI5() != "") {
			order.setI5(orderForm.getI5().replace(
					orderForm.getI5().substring(3, 14), "***********"));
		}
		if (orderForm.getI6() != "") {
			order.setI6(orderForm.getI6().replace(
					orderForm.getI6().substring(3, 14), "***********"));
		}
		if (orderForm.getI7() != "") {
			order.setI7(orderForm.getI7().replace(
					orderForm.getI7().substring(3, 14), "***********"));
		}
		if (orderForm.getI8() != "") {
			order.setI8(orderForm.getI8().replace(
					orderForm.getI8().substring(3, 14), "***********"));
		}
		if (orderForm.getI9() != "") {
			order.setI9(orderForm.getI9().replace(
					orderForm.getI9().substring(3, 14), "***********"));
		}
		if (orderForm.getI10() != "") {
			order.setI10(orderForm.getI10().replace(
					orderForm.getI10().substring(3, 14), "***********"));
		}
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String date = format.format(new Date());
		order.setDate(date);
		int back = orderService.addOrder(order);
		PrintWriter out = response.getWriter();
		out.print(back);
		out.flush();
		out.close();
	}

	public ActionForward userorder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		HttpSession session = request.getSession();
		if (session.getAttribute("user") == null) {
			return mapping.findForward("wrong");
		} else {
			OrderForm orderForm = (OrderForm) form;
			OrderService orderService = new OrderService();
			HotSpotService hotSpotService = new HotSpotService();
			Orderinfo order = orderService.getOrderById(orderForm.getId());
			Hotspot spot = hotSpotService.getHotspotById(order.getSpotid());

			if (order.getCarid() != null) {
				CarService carService = new CarService();
				Car car = carService.getCarById(order.getCarid());
				request.setAttribute("car", car);
			}
			request.setAttribute("spot", spot);
			request.setAttribute("order", order);
			return mapping.findForward("detail");
		}

	}

	// 导出全部订单
	public void export(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 第一步，创建一个webbook，对应一个Excel文件
		HSSFWorkbook wb = new HSSFWorkbook();
		// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
		HSSFSheet sheet = wb.createSheet("订单信息表");
		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
		HSSFRow row = sheet.createRow((int) 0);
		// 第四步，创建单元格，并设置值表头 设置表头居中
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		HSSFCell cell = row.createCell(0);
		cell.setCellValue("订单号");
		cell.setCellStyle(style);
		cell = row.createCell(1);
		cell.setCellValue("景点名");
		cell.setCellStyle(style);
		cell = row.createCell(2);
		cell.setCellValue("车辆编号");
		cell.setCellStyle(style);
		cell = row.createCell(3);
		cell.setCellValue("人数");
		cell.setCellStyle(style);
		cell = row.createCell(4);
		cell.setCellValue("价格");
		cell.setCellStyle(style);
		cell = row.createCell(5);
		cell.setCellValue("状态");
		cell.setCellStyle(style);
		cell = row.createCell(6);
		cell.setCellValue("下单日期");
		cell.setCellStyle(style);
		// 第五步，写入实体数据 实际应用中这些数据从数据库得到，
		OrderService orderService = new OrderService();
		List<Orderinfo> list = orderService.getOrder();

		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow((int) i + 1);
			Orderinfo order = (Orderinfo) list.get(i);
			// 第四步，创建单元格，并设置值
			row.createCell(0).setCellValue(order.getId());
			row.createCell(1).setCellValue(order.getSpotid());
			row.createCell(2).setCellValue(order.getCarid());
			row.createCell(3).setCellValue(order.getNum() + "人");
			row.createCell(4).setCellValue(order.getPrice() + "元");
			if (order.getStatus() == 0) {
				row.createCell(5).setCellValue("未支付");
			} else if (order.getStatus() == 1) {
				row.createCell(5).setCellValue("已支付");
			} else if (order.getStatus() == 2) {
				row.createCell(5).setCellValue("处理中");
			} else if (order.getStatus() == 3) {
				row.createCell(5).setCellValue("订单完成");
			} else if (order.getStatus() == 4) {
				row.createCell(5).setCellValue("订单取消");
			}
			row.createCell(6).setCellValue(order.getDate());
		}
		// 第六步，将文件存到指定位置
		String filePath = "";
		Date dt = new Date();
		DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String date = df.format(dt).toString();
		filePath = "/Users/Nemo/Documents/order" + date + ".xls";
		File file = new File(filePath);
		try {
			FileOutputStream fout = new FileOutputStream(file);
			wb.write(fout);
			fout.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ActionForward getorderbyspotid(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session.getAttribute("admin") == null) {
			return mapping.findForward("fail");
		} else {
			OrderForm orderForm = (OrderForm) form;
			OrderService orderService = new OrderService();
			List<Orderinfo> list = orderService.getOrderBySpotId(orderForm
					.getSpotid());
			request.setAttribute("people", list);
			request.setAttribute("spotid", orderForm.getSpotid());
			return mapping.findForward("people");
		}
	}

	// 导出车辆人员信息
	public void exportpeople(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrderForm orderForm = (OrderForm) form;

		// 第一步，创建一个webbook，对应一个Excel文件
		HSSFWorkbook wb = new HSSFWorkbook();
		// 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet
		HSSFSheet sheet = wb.createSheet("景点人员信息表");
		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short
		HSSFRow row = sheet.createRow((int) 0);
		// 第四步，创建单元格，并设置值表头 设置表头居中
		HSSFCellStyle style = wb.createCellStyle();
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式
		HSSFCell cell = row.createCell(0);
		cell.setCellValue("游客名");
		cell.setCellStyle(style);
		cell = row.createCell(1);
		cell.setCellValue("游客身份证号码");
		cell.setCellStyle(style);
		// 第五步，写入实体数据 实际应用中这些数据从数据库得到，
		OrderService orderService = new OrderService();
		List<Orderinfo> list = orderService.getOrderBySpotId(orderForm
				.getSpotid());
		System.out.println(list.size());
		for (int i = 0; i < list.size(); i++) {
			row = sheet.createRow(i + 1);
			Orderinfo order = (Orderinfo) list.get(i);
			// 第四步，创建单元格，并设置值
			row.createCell(0).setCellValue(order.getN1());
			row.createCell(1).setCellValue(order.getI1());
			row = sheet.createRow(i + list.size() + 1);
			row.createCell(0).setCellValue(order.getN2());
			row.createCell(1).setCellValue(order.getI2());
			row = sheet.createRow(i + list.size() + list.size() + 1);
			row.createCell(0).setCellValue(order.getN3());
			row.createCell(1).setCellValue(order.getI3());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ 1);
			row.createCell(0).setCellValue(order.getN4());
			row.createCell(1).setCellValue(order.getI4());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ list.size() + 1);
			row.createCell(0).setCellValue(order.getN5());
			row.createCell(1).setCellValue(order.getI5());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ list.size() + list.size() + 1);
			row.createCell(0).setCellValue(order.getN6());
			row.createCell(1).setCellValue(order.getI6());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ list.size() + list.size() + list.size() + 1);
			row.createCell(0).setCellValue(order.getN7());
			row.createCell(1).setCellValue(order.getI7());
			row = sheet
					.createRow(i + list.size() + list.size() + list.size()
							+ list.size() + list.size() + list.size()
							+ list.size() + 1);
			row.createCell(0).setCellValue(order.getN8());
			row.createCell(1).setCellValue(order.getI8());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ list.size() + list.size() + list.size() + list.size()
					+ list.size() + 1);
			row.createCell(0).setCellValue(order.getN9());
			row.createCell(1).setCellValue(order.getI9());
			row = sheet.createRow(i + list.size() + list.size() + list.size()
					+ list.size() + list.size() + list.size() + list.size()
					+ list.size() + list.size() + 1);
			row.createCell(0).setCellValue(order.getN10());
			row.createCell(1).setCellValue(order.getI10());
		}
		// 第六步，将文件存到指定位置
		String filePath = "";
		Date dt = new Date();
		DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String date = df.format(dt).toString();
		filePath = "/Users/Nemo/Documents/spotpeople" + date + ".xls";
		File file = new File(filePath);

		try {
			// FileOutputStream fout = new FileOutputStream(
			// "/Users/Nemo/Documents/carpeople.xls");
			// wb.write(fout);
			// fout.close();
			OutputStream out = new FileOutputStream(file);
			wb.write(out);
			out.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
		int key = 0;
		int MaxRowNum = 0, MaxCellNum = 0;
		try {
			FileInputStream in = new FileInputStream(filePath);
			POIFSFileSystem fs = new POIFSFileSystem(in);
			HSSFWorkbook workbook = new HSSFWorkbook(fs);
			FileOutputStream out = new FileOutputStream(
					"/Users/Nemo/Documents/spotpeople" + date + ".xls");
			int number = workbook.getNumberOfSheets();
			for (int i = 0; i < number; i++) { // 对每个sheet检查空行
				sheet = workbook.getSheetAt(i); // 14
				System.out.println("正在对工作簿：" + sheet.getSheetName()
						+ " 移除空行操作 行数" + (sheet.getLastRowNum() + 1));
				MaxRowNum = 0;
				for (int k = 0; k <= sheet.getLastRowNum(); k++) {
					HSSFRow hRow = sheet.getRow(k);
					// System.out.println((k + 1) + "行");
					if (isBlankRow(hRow)) // 找到空行索引
					{
						int m = 0;
						for (m = k + 1; m <= sheet.getLastRowNum(); m++) {
							HSSFRow nhRow = sheet.getRow(m);
							if (!isBlankRow(nhRow)) {
								// System.out.println("下一个非空行" + (m + 1));
								sheet.shiftRows(m, sheet.getLastRowNum(), k - m);
								break;
							}
						}
						if (m > sheet.getLastRowNum())
							break; // 此工作簿完成
					} else { // 非空行
						MaxRowNum++;
						if (MaxCellNum < hRow.getLastCellNum())
							MaxCellNum = hRow.getLastCellNum();
					}
				}
				workbook.setPrintArea(i, 0, MaxCellNum, 0, MaxRowNum);
				System.out.println("移除空行操作完成 " + sheet.getSheetName()
						+ " 有效行数 " + MaxRowNum);
			}
			workbook.write(out);
			in.close();
			out.close();
		} catch (IOException e) {
			System.out.println(key + " " + e.getMessage() + " ");
			e.printStackTrace();

		}

		System.out.println("移除空行操作完成");

	}

	/**
	 * 判断excel 空行
	 */
	public boolean isBlankRow(HSSFRow row) {
		if (row == null)
			return true;
		for (int i = row.getFirstCellNum(); i < row.getLastCellNum(); i++) {
			HSSFCell hcell = row.getCell(i);
			if (!isBlankCell(hcell))
				return false;
		}
		return true;
	}

	/**
	 * 判断excel 空单元格 /
	 * 
	 * @param hcell
	 * @return
	 */
	public boolean isBlankCell(HSSFCell hcell) {
		if (hcell == null)
			return true;
		hcell.setCellType(hcell.CELL_TYPE_STRING);
		String content = hcell.getStringCellValue().trim();
		if (content == null || "".equals(content)) // 找到非空行
		{
			return true;
		}
		return false;
	}

	public void updatestatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrderForm orderForm = (OrderForm) form;
		OrderService orderService = new OrderService();
		Orderinfo orderinfo = orderService.getOrderById(orderForm.getId());
		// 如果用户在取消时,已经安排好车辆需删除信息
		if (orderinfo.getCarid() != "" && orderinfo.getCarid() != null) {
			String id = orderinfo.getCarid();
			CarService carService = new CarService();
			Car car = carService.getCarById(id);
			car.setPeople(car.getPeople() - orderinfo.getNum());
			carService.updCar(car);
		}
		orderService.updStatus(orderForm.getId(), orderForm.getStatus());

	}

	public void getorderbyid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		OrderForm orderForm = (OrderForm) form;
		OrderService orderService = new OrderService();
		Orderinfo orderinfo = new Orderinfo();
		orderinfo = orderService.getOrderById(orderForm.getId());
		request.setAttribute("order", orderinfo);

	}

	// 完成订单
	public void finishorder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		OrderForm orderForm = (OrderForm) form;
		OrderService orderService = new OrderService();
		orderService.updStatus(orderForm.getId(), 3);
		PrintWriter out = response.getWriter();
		out.print(1);
		out.flush();
		out.close();

	}

	// 订单一览
	public ActionForward orderlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		if (session.getAttribute("admin") == null) {
			return mapping.findForward("fail");
		} else {
			OrderService orderService = new OrderService();
			CarService carService = new CarService();
			List<Orderinfo> orderlist = orderService.getOrder();
			List<Car> carlist = carService.getEmptyCar();
			int back = orderService.getOrderCount();
			request.setAttribute("count", back);
			request.setAttribute("order", orderlist);
			request.setAttribute("car", carlist);
			return mapping.findForward("list");
		}
	}
}